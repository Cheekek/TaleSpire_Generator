import json
import unittest
import time
import pyperclip

from generator.generator import Generator
from objects.assetManager import AssetManager
from converter.conversionManager import ConversionManager


class TestGenerator(unittest.TestCase):

    @classmethod
    def setUpClass(self):
        print("\nGenerate (last one takes ~30s, be patient!): ", end='')
        self.maxDiff = None

        self.customObjects = {
            "Tree_4": AssetManager.addCustomAsset(
                "Tree_4",
                "```H4sIAAAAAAAACzv369xFJgZmBgYGV8sOe+Zcb6+FuwOFhA/vvMUIFGP54+9t4qri2XJlvvU8595GJqDYnexlT8+YiztvObZwR4/xpJcgdYwMEmxACmiOAIsBQwMjEwMHUwADBEBoAGi/N01oAAAA```"
            ),
            "Tree_3": AssetManager.addCustomAsset(
                "Tree_3",
                "```H4sIAAAAAAAACzv369xFJgYWBgYGJ8kbgpNqqpxbpJeV8cZNqGMEirladtgz53p7LdwdKCR8eOctkBjLH39vE1cVz5Yr863nOfc2gsTuZC97esZc3HnLsYU7eownvQSJMTMIsAQAaTYGCTYgxcDIwMG0gQECIDQAM1rOhHwAAAA=```"
            ),
            "Tree_2": AssetManager.addCustomAsset(
                "Tree_2",
                "```H4sIAAAAAAAACzv369xFJgZmBgYGV8sOe+Zcb6+FuwOFhA/vvMUIFGP54+9t4qri2XJlvvU8595GkNid7GVPz5iLO285tnBHj/GklyAxLgYBFgYw4GBSYGRgBokpgAgGAJmdG+RgAAAA```"
            ),
            "Tree_1": AssetManager.addCustomAsset(
                "Tree_1",
                "```H4sIAAAAAAAACzv369xFJgYmBgYGV8sOe+Zcb6+FuwOFhA/vvMUIFLuTvezpGXNx5y3HFu7oMZ70EiTGz8ABUg4GE8AkAIf2hGVEAAAA```"
            ),
            "Crypt": AssetManager.addCustomAsset(
                "Crypt",
                "```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```"
            ),

        }

    def tearDown(self) -> None:
        return super().tearDown()

    def setUp(self):
        self.generator = Generator()
        self.generator.setXYZ(3, 3, 10)
        self.generator.setOctaves(1, 0.5)
        self.generator.setScales(1, 64)
        self.generator.setExponent(2.0)

    def arrayCompare(self, generated, expected, delta):
        msg = ""
        for x in range(0, 3):
            for y in range(0, 3):
                if abs(expected[x][y] - generated[x][y]) > delta:
                    msg += f"""({x}, {y}) dif = {
                        round(expected[x][y] - generated[x][y], 4)
                        } expected: {
                            round(expected[x][y], 4)
                        } got: {
                            round(generated[x][y], 4)
                        }\n"""
        if len(msg):
            msg = "\nSome values are not equal: \n" + msg
        return msg

    def test_setXYZ(self) -> None:

        # Valid XYZ
        self.generator.setXYZ(15, 10, 10)
        self.assertEqual(self.generator.x, 15)
        self.assertEqual(self.generator.y, 10)
        self.assertEqual(self.generator.z, 10)

        # Invalid XYZ
        self.generator.setXYZ(-3, 0, -123.2)
        self.assertEqual(self.generator.x, 1)
        self.assertEqual(self.generator.y, 1)
        self.assertEqual(self.generator.z, 1)

    def test_setOctaves(self) -> None:
        self.generator.setOctaves(1, 0.75, 0.5)
        self.assertEqual(self.generator.noise.octaves[0], 1)
        self.assertEqual(self.generator.noise.octaves[1], 0.75)
        self.assertEqual(self.generator.noise.octaves[2], 0.5)

    def test_setScales(self) -> None:
        self.generator.setScales(1, 4, 16)
        self.assertEqual(self.generator.noise.scales[0], 1)
        self.assertEqual(self.generator.noise.scales[1], 4)
        self.assertEqual(self.generator.noise.scales[2], 16)

    def test_setExponent(self) -> None:
        self.generator.setExponent(0.78)
        self.assertEqual(self.generator.exponent, 0.78)

    def test_setSeed(self) -> None:
        self.assertEqual(self.generator.noise.noiseXY(0, 0), 0.0)
        self.assertEqual(
            self.generator.noise.noiseXY(-5, -17),
            -0.5234590815895944)
        self.assertEqual(
            self.generator.noise.noiseXY(5, 17),
            0.392517558040669)

        self.generator.setSeed(123456789)
        self.assertEqual(self.generator.noise.noiseXY(0, 0), 0.0)
        self.assertEqual(
            self.generator.noise.noiseXY(-5, -17),
            -0.7200741622627534)
        self.assertEqual(
            self.generator.noise.noiseXY(5, 17),
            -0.79179780448877)

    def test_setTileSize(self) -> None:
        self.assertEqual(self.generator.tileSize, 0)
        self.generator.setTileSize(2)
        self.assertEqual(self.generator.tileSize, 2.0)
        self.generator.setTileSize(-3)
        self.assertEqual(self.generator.tileSize, 0)

    def test_noiseXY(self) -> None:
        self.generator.setSeed(123456)
        self.assertEqual(self.generator.noise.noiseXY(0, 0), 0.0)
        self.assertEqual(
            self.generator.noise.noiseXY(-643, -234),
            -0.27525423557961687)
        self.assertEqual(
            self.generator.noise.noiseXY(643, 234),
            0.2521903471662688)

    def test_terrainGenerationNoPreciseNoRidge(self):
        expected = """```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```"""

        self.generator.setXYZ(20, 20, 50)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(False)
        self.generator.setUseRidgeNoise(False)

        groundAssets = [
            {"asset": "3911d10d-142b-4f33-9fea-5d3a10c53781"},
        ]
        output = self.generator.generate(groundAssets)[0]["output"]
        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_terrainGenerationPreciseNoRidge(self):
        expected = """```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```"""

        self.generator.setXYZ(20, 20, 50)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(True)
        self.generator.setUseRidgeNoise(False)

        groundAssets = [
            {"asset": "3911d10d-142b-4f33-9fea-5d3a10c53781"}
        ]
        output = self.generator.generate(groundAssets)[0]["output"]

        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_terrainGenerationNoPreciseRidge(self):
        expected = """```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```"""

        self.generator.setXYZ(20, 20, 20)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(False)
        self.generator.setUseRidgeNoise(True)

        groundAssets = [
            {"asset": "3911d10d-142b-4f33-9fea-5d3a10c53781"}
        ]
        output = self.generator.generate(groundAssets)[0]["output"]

        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_terrainGenerationPreciseRidge(self):
        expected = """```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```"""

        self.generator.setXYZ(20, 20, 20)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(True)
        self.generator.setUseRidgeNoise(True)

        groundAssets = [
            {"asset": "3911d10d-142b-4f33-9fea-5d3a10c53781"}
        ]
        output = self.generator.generate(groundAssets)[0]["output"]
        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_terrainGenerationPlaceObject(self):
        expected = """```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```"""

        self.generator.setXYZ(20, 20, 20)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(False)
        self.generator.setUseRidgeNoise(False)

        groundAssets = [
            {"asset": "3911d10d-142b-4f33-9fea-5d3a10c53781"}
        ]

        placeObjects = [
            {"asset": self.customObjects["Tree_4"]}
        ]

        output = self.generator.generate(
            groundAssets,
            placeObjects)[0]["output"]

        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_rotation(self):
        expected = """```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```"""

        placeObject = AssetManager.getAsset(self.customObjects["Crypt"])

        self.generator.output = {
            "unique_asset_count": 0,
            "asset_data": {}
        }

        self.generator.place(placeObject, 0, 0, 0, 0)
        self.generator.place(placeObject, 0, 0, 10, 90)
        self.generator.place(placeObject, 0, 0, 20, 180)
        self.generator.place(placeObject, 0, 0, 30, 270)
        self.generator.place(placeObject, 0, 0, 40, 360)

        output = ConversionManager.encode(
            json.dumps(self.generator.output)
        ).decode("ascii")

        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_fullOnePieceSmallTile(self):
        expected = """``````"""

        self.generator.setXYZ(20, 20, 30)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(True)
        self.generator.setUseRidgeNoise(False)

        groundAssets = [
            {"asset": "cf6063bb-5c6e-4107-b3e9-9c0c5ac75768"}
        ]
        placeObjects = [
            {"asset": self.customObjects["Tree_3"],
                "density": 10,
                "clumping": 32,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 0.5,
                "heightBasedOffset": 0},
            {"asset": self.customObjects["Tree_2"],
                "density": 16,
                "clumping": 16,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 0.5,
                "heightBasedOffset": 0},
            {"asset": self.customObjects["Tree_1"],
                "density": 10,
                "clumping": 1,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": 0},
            {"asset": "98259887-53c2-41d4-a54f-6140b6acf020",
                "density": 50,
                "clumping": 3,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": False,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": -10},
            {"asset": "6ba81f8e-9a9c-4745-990f-2cb27bb29cfc",
                "density": 20,
                "clumping": 16,
                "randomNoiseWeight": 1.0,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": False,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": -5}
        ]
        output = self.generator.generate(
            groundAssets,
            placeObjects)[0]["output"]

        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_fullManyPieces(self):
        expected = [
            {"x": 0, "y": 0, "output": "``````"},
            {"x": 0, "y": 1, "output": "``````"},
            {"x": 1, "y": 0, "output": "``````"},
            {"x": 1, "y": 1, "output": "``````"},
            {"x": 2, "y": 0, "output": "``````"},
            {"x": 2, "y": 1, "output": "``````"}
        ]

        self.generator.setXYZ(20, 20, 30)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(True)
        self.generator.setUseRidgeNoise(False)

        groundAssets = [
            {"asset": "cf6063bb-5c6e-4107-b3e9-9c0c5ac75768"}
        ]
        placeObjects = [
            {"asset": self.customObjects["Tree_3"],
                "density": 10,
                "clumping": 32,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 0.5,
                "heightBasedOffset": 0},
            {"asset": self.customObjects["Tree_2"],
                "density": 16,
                "clumping": 16,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 0.5,
                "heightBasedOffset": 0},
            {"asset": self.customObjects["Tree_1"],
                "density": 10,
                "clumping": 1,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": 0},
            {"asset": "98259887-53c2-41d4-a54f-6140b6acf020",
                "density": 50,
                "clumping": 3,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": False,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": -10},
            {"asset": "6ba81f8e-9a9c-4745-990f-2cb27bb29cfc",
                "density": 20,
                "clumping": 16,
                "randomNoiseWeight": 1.0,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": False,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": -5},
            {"asset": self.customObjects["Tree_2"],
                "density": 20,
                "clumping": 16,
                "randomNoiseWeight": 1.0,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": False,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": -5}
        ]
        output = self.generator.generate(groundAssets, placeObjects, [3, 2])
        self.assertEqual(expected, output, msg="Output strings are different!")

    def test_timedGeneration(self):
        self.generator.setXYZ(20, 20, 30)
        self.generator.setOctaves(1, 0.5, 0.25)
        self.generator.setScales(1, 2, 4)
        self.generator.setExponent(1.5)
        self.generator.setUsePreciseHeight(True)
        self.generator.setUseRidgeNoise(False)

        groundAssets = [
            {"asset": "cf6063bb-5c6e-4107-b3e9-9c0c5ac75768"}
        ]
        placeObjects = [
            {"asset": self.customObjects["Tree_3"],
                "density": 10,
                "clumping": 32,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 0.5,
                "heightBasedOffset": 0},
            {"asset": self.customObjects["Tree_2"],
                "density": 16,
                "clumping": 16,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 0.5,
                "heightBasedOffset": 0},
            {"asset": self.customObjects["Tree_1"],
                "density": 10,
                "clumping": 1,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": 0},
            {"asset": "98259887-53c2-41d4-a54f-6140b6acf020",
                "density": 50,
                "clumping": 3,
                "randomNoiseWeight": 0.8,
                "randomNudgeEnabled": False,
                "randomRotationEnabled": True,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": -10},
            {"asset": "6ba81f8e-9a9c-4745-990f-2cb27bb29cfc",
                "density": 20,
                "clumping": 16,
                "randomNoiseWeight": 1.0,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": False,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": -5},
            {"asset": self.customObjects["Tree_2"],
                "density": 20,
                "clumping": 16,
                "randomNoiseWeight": 1.0,
                "randomNudgeEnabled": True,
                "randomRotationEnabled": False,
                "heightBasedMultiplier": 1,
                "heightBasedOffset": -5}
        ]
        start_time = time.time()
        output = self.generator.generate(groundAssets, placeObjects, [10, 10])
        end_time = time.time()

        self.assertLessEqual(end_time-start_time, 30, msg="Generation takes too long!")
